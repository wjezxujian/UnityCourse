//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Example {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.Kernel;
    using uFrame.MVVM;
    using uFrame.MVVM.Services;
    using uFrame.MVVM.Bindings;
    using uFrame.Serialization;
    using UniRx;
    using UnityEngine;
    
    
    public class UIPlayerInfoViewBase : uFrame.MVVM.ViewBase {
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public String _Title;
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public String _Username;
        
        [UFToggleGroup("Title")]
        [UnityEngine.HideInInspector()]
        public bool _BindTitle = true;
        
        [UFGroup("Title")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_Titleinput")]
        protected UnityEngine.UI.Text _TitleInput;
        
        [UFToggleGroup("OnButtonClicked")]
        [UnityEngine.HideInInspector()]
        public bool _BindOnButtonClicked = true;
        
        [UFGroup("OnButtonClicked")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_OnButtonClickedbutton")]
        protected UnityEngine.UI.Button _OnButtonClickedButton;
        
        [UFToggleGroup("Username")]
        [UnityEngine.HideInInspector()]
        public bool _BindUsername = true;
        
        [UFGroup("Username")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_Usernameinput")]
        protected UnityEngine.UI.InputField _UsernameInput;
        
        [UFGroup("Username")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_UsernameonlyWhenChanged")]
        protected bool _UsernameOnlyWhenChanged;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(UIPlayerInfoViewModel);
            }
        }
        
        public UIPlayerInfoViewModel UIPlayerInfo {
            get {
                return (UIPlayerInfoViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as UIPlayerInfoViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var uiplayerinfoview = ((UIPlayerInfoViewModel)model);
            uiplayerinfoview.Title = this._Title;
            uiplayerinfoview.Username = this._Username;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.UIPlayerInfo to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
            if (_BindTitle) {
                this.BindTextToProperty(_TitleInput, this.UIPlayerInfo.TitleProperty);
            }
            if (_BindOnButtonClicked) {
                this.BindButtonToCommand(_OnButtonClickedButton, this.UIPlayerInfo.OnButtonClicked);
            }
            if (_BindUsername) {
                this.BindInputFieldToProperty(_UsernameInput, this.UIPlayerInfo.UsernameProperty);
            }
            if (_BindUsername) {
                this.BindProperty(this.UIPlayerInfo.UsernameProperty, this.UsernameChanged, _UsernameOnlyWhenChanged);
            }
        }
        
        public virtual void UsernameChanged(String arg1) {
        }
        
        public virtual void ExecuteOnButtonClicked() {
            UIPlayerInfo.OnButtonClicked.OnNext(new OnButtonClickedCommand() { Sender = UIPlayerInfo });
        }
        
        public virtual void ExecuteOnButtonClicked(OnButtonClickedCommand command) {
            command.Sender = UIPlayerInfo;
            UIPlayerInfo.OnButtonClicked.OnNext(command);
        }
    }
    
    public class UIPlayerInfoSimpleViewBase : uFrame.MVVM.ViewBase {
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public String _Title;
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public String _Username;
        
        [UFToggleGroup("Username")]
        [UnityEngine.HideInInspector()]
        public bool _BindUsername = true;
        
        [UFGroup("Username")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_Usernameinput")]
        protected UnityEngine.UI.Text _UsernameInput;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(UIPlayerInfoViewModel);
            }
        }
        
        public UIPlayerInfoViewModel UIPlayerInfo {
            get {
                return (UIPlayerInfoViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as UIPlayerInfoViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var uiplayerinfosimpleview = ((UIPlayerInfoViewModel)model);
            uiplayerinfosimpleview.Title = this._Title;
            uiplayerinfosimpleview.Username = this._Username;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.UIPlayerInfo to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
            if (_BindUsername) {
                this.BindTextToProperty(_UsernameInput, this.UIPlayerInfo.UsernameProperty);
            }
        }
        
        public virtual void ExecuteOnButtonClicked() {
            UIPlayerInfo.OnButtonClicked.OnNext(new OnButtonClickedCommand() { Sender = UIPlayerInfo });
        }
        
        public virtual void ExecuteOnButtonClicked(OnButtonClickedCommand command) {
            command.Sender = UIPlayerInfo;
            UIPlayerInfo.OnButtonClicked.OnNext(command);
        }
    }
}
